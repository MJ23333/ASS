import {
  getDomContext,
  setDomContext
} from "./chunk-OTU5X46N.js";
import {
  writable
} from "./chunk-F4TPOVUK.js";
import {
  SvelteComponentDev,
  create_slot,
  dispatch_dev,
  getContext,
  get_all_dirty_from_scope,
  get_slot_changes,
  init,
  safe_not_equal,
  setContext,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-POX46NQO.js";

// node_modules/svelte-motion/src/context/MotionConfigContext.js
var MotionConfigContext = (c) => getDomContext("MotionConfig", c) || writable({
  transformPagePoint: function(p) {
    return p;
  },
  isStatic: false
});

// node_modules/svelte-motion/src/context/ScaleCorrectionProvider.svelte
function create_fragment(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[2].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[1],
    null
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope*/
        2)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[1],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[1]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[1],
              dirty,
              null
            ),
            null
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
var ScaleCorrectionContext = (isCustom) => getDomContext("ScaleCorrection", isCustom) || writable([]);
var ScaleCorrectionParentContext = () => writable([]);
var provideScaleCorrection = (isCustom) => {
  const fromParent = getContext(ScaleCorrectionContext) || ScaleCorrectionContext(isCustom);
  const ctx = ScaleCorrectionContext();
  setContext(ScaleCorrectionContext, ctx);
  setDomContext("ScaleCorrection", isCustom, ctx);
  setContext(ScaleCorrectionParentContext, fromParent);
};
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ScaleCorrectionProvider", slots, ["default"]);
  let { isCustom } = $$props;
  provideScaleCorrection(isCustom);
  $$self.$$.on_mount.push(function() {
    if (isCustom === void 0 && !("isCustom" in $$props || $$self.$$.bound[$$self.$$.props["isCustom"]])) {
      console.warn("<ScaleCorrectionProvider> was created without expected prop 'isCustom'");
    }
  });
  const writable_props = ["isCustom"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<ScaleCorrectionProvider> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("isCustom" in $$props2)
      $$invalidate(0, isCustom = $$props2.isCustom);
    if ("$$scope" in $$props2)
      $$invalidate(1, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    writable,
    getContext,
    setContext,
    getDomContext,
    setDomContext,
    ScaleCorrectionContext,
    ScaleCorrectionParentContext,
    provideScaleCorrection,
    isCustom
  });
  $$self.$inject_state = ($$props2) => {
    if ("isCustom" in $$props2)
      $$invalidate(0, isCustom = $$props2.isCustom);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [isCustom, $$scope, slots];
}
var ScaleCorrectionProvider = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { isCustom: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ScaleCorrectionProvider",
      options,
      id: create_fragment.name
    });
  }
  get isCustom() {
    throw new Error("<ScaleCorrectionProvider>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set isCustom(value) {
    throw new Error("<ScaleCorrectionProvider>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ScaleCorrectionProvider_default = ScaleCorrectionProvider;

export {
  MotionConfigContext,
  ScaleCorrectionContext,
  ScaleCorrectionParentContext,
  provideScaleCorrection,
  ScaleCorrectionProvider_default
};
//# sourceMappingURL=chunk-KNJTIMYH.js.map
